plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    id 'application'
    id 'maven-publish'
    id 'signing'
}

group property('group')
version property('version')

repositories {
    mavenCentral()
}

/**
 * these parts are used to publish the repo to maven.
 * if you don't use it, please remove them.
 */
String ossrhUsername = rootProject.property("sonatypeUsername") as String
String ossrhPassword = rootProject.property("sonatypePassword") as String

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
    implementation 'io.javalin:javalin:4.6.3'
    //implementation 'com.fasterxml.jackson.core:jackson-databind::2.9.6'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.4.20'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect:1.4.20'
    testImplementation 'org.slf4j:slf4j-simple:1.7.11'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

application {
    mainClassName = 'MainKt'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    getArchiveClassifier().set("sources")
    //classifier = 'sources'
    from sourceSets.main.allSource
}

application {
    mainClass.set("MainKt")
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}


/**
 * this part is used to publish the repo to maven.
 * if you don't use it, please remove this block.
 */

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'my-library'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'KhlKt'
                description = 'An SDK of KHL for JVM platforms.'
                url = 'https://github.com/zly2006/KhlKt'
                properties = [
                        myProp: "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'GNU Affero General Public License v3'
                        url = 'https://www.gnu.org/licenses'
                    }
                }
                developers {
                    developer {
                        id = 'zly2006'
                        name = 'Liyan Zhao '
                        email = 'john.doe@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://example.com/my-library.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'http://example.com/my-library/'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

signMavenJavaPublication {

}

task fatJar(type: Jar) {
    manifest {
        //attributes 'Main-Class': 'MainKt'
    }
    setArchivesBaseName(project.name)
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}